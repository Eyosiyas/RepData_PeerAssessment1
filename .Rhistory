x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(z)
cacheSolve <- function(x, ...) {
if(typeof(x) != 'list'){
message(typeof(x))
x<-makeCacheMatrix(x)
message(typeof(x))
return(x)
}
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(z)
w<-cacheSolve(z)
w<-cacheSolve(w)
w<-cacheSolve(z)
n
w<-cacheSolve(z)
w<-cacheSolve(w)
n
cacheSolve(w)
cacheSolve(w\x)
cacheSolve(x)
x$getinv()
w$getinv()
temo<-w$get()
temo
temo<-x$get()
temo
temo<-w$get()
temo<-temo$get()
temo
cacheSolve <- function(x, ...) {
if(typeof(x) == 'list'){
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
return(inv)
}
message("input is invalid")
invisible(x)
}
temo<-x$get()
cacheSolve(temo)
makeCacheMatrix(temo)
temo<-x$get()
temo
temo[2,2]<-10
temo
x$set(temo)
x$getinv()
chacheSolve(x)
cacheSolve(x)
temo<-x$get()
temo
temo[2,2]<--2.46
temo
cacheSolve(x)
x$set(temo)
cacheSolve(x)
z
cacheSolve(z)
if(typeof(z) == 'numeric') print(z)
if(typeof(z) == 'numeric') print("yes")
typeof(z)
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
return(inv)
}
cacheSolve(z)
cacheSolve(makeCacheMatrix(z))
is.null(z$getinv)
str(gl)
gl(2,4)
summary(gl(2,4))
str(gl(2,4))
str(gl(40,10))
summary(gl(40,10))
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rnorm(5)
rnorm(5)
set.seed(2)
rnorm(5)
rnorm(5)
set.seed(2)
rnorm(5)
rnorm(5)
rnorm(5)
setwd("~/Data Scientist Coursera/Reproducible Research")
install.packages(c("boot", "class", "cluster", "codetools", "curl", "foreign", "jsonlite", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "R6", "Rcpp", "rmarkdown", "rpart", "scales", "spatial", "survival"))
nosim<-1000
n<-10
sd(apply(matrix(rnorm(nosim*n),nosim),1,mean))
simmatrx<-matrix(rnorm(nosim*n),nosim)
nrows(simmatrx)
nrow(simmatrx)
ncolumn(simmatrx)
ncol(simmatrx)
1/sqrt(n)
sd(apply(matrix(runif(nosim*n),nosim),1,mean))
sd(apply(matrix(rpois(nosim*n,4),nosim),1,mean))
sd(apply(matrix(rpois(nosim*n,4),nosim),1,mean))
sd(apply(matrix(sample(0,:1,nosim*n,replace=TRUE),nosim),1,mean))
sd(apply(matrix(sample(0:1,nosim*n,replace=TRUE),nosim),1,mean))
setwd("~/Data Scientist Coursera/Reproducible Research/RepData_PeerAssessment1")
activity <- read.csv("\activity\activity.csv")
activity <- read.csv("/activity/activity.csv")
activity <- read.csv(file="/activity/activity.csv", header = TRUE)
list.files("/....")
activity <- read.csv(file="..activity/activity.csv", header = TRUE)
activity <- read.csv(file="\\activity\\activity.csv", header = TRUE)
activity <- read.csv(file="./activity/activity.csv", header = TRUE)
View(activity)
View(activity)
typeof(activity$date)
activity[1,:]
activity(1,:)
activity[1,;]
activity(1,;)
activity(1,2)
activity[1,2]
activity$date<-as.date(activity$date, format = "%Y-%m-%d")
activity$date<-as.Date(activity$date, format = "%Y-%m-%d")
View(activity)
View(activity)
typeof(activity$date)
activity[1,2]
class(activity[1,2])
class(activity[1,1])
class(activity[1,3])
meanSteps<-(activity,steps,mean,na.rm=TRUE)
meanSteps<-apply(activity,steps,mean,na.rm=TRUE)
meanSteps<-apply(activity,activity$steps,mean,na.rm=TRUE)
meanSteps<-apply(activity,3,mean,na.rm=TRUE)
S<-split(activity$steps)
S<-split(activity,steps)
S<-split(activity,activity$steps)
S<-split(activity,activity$date)
meanSteps<-apply(s,S$steps,mean,na.rm=TRUE)
meanSteps<-apply(S,S$steps,mean,na.rm=TRUE)
meanSteps<-sapply(S,S$steps,mean,na.rm=TRUE)
meanSteps<-sapply(S,mean,na.rm=TRUE)
S1<-S[1]
S1<-S[[1]
]
View(`S1`)
meanSteps<-apply(activity,1,mean,na.rm=TRUE)
meanSteps<-apply(activity,1,mean,na.rm=FALSE)
meanSteps<-sapply(S,function(x){mean(x[1])},na.rm=TRUE)
meanSteps<-sapply(S,function(x){mean(x[1],na.rm=TRUE)})
mean(S1$steps,na.rm=TRUE)
mean(S1$steps,na.rm=FALSE)
S1<-S[1]
S1<-S1[1]
S1<-S1[[1]]
S1_steps<-S1[[1]]$steps
meanSteps<-sapply(S,function(x){x_temp<-x[[1]];mean(x_temp$steps,na.rm=FALSE)})
meanSteps<-sapply(S,function(x){x_temp<-x[[1]];mean(x_temp[:,1],na.rm=FALSE)})
meanSteps<-sapply(split(activity$steps,activity$date),mean)
w<-unique(activity$steps)
w<-unique(activity$date)
unique(activity$date)
w<-data.frame(date=unique(activity$date),steps.mean = meanSteps)
View(w)
rownames(activity)
rownames(w)
rownames(w)<-NULL
View(w)
rownames(w)
meanSteps<-sapply(split(activity$steps,activity$date),mean,na.rm=TRUE)
x<-data.frame(date=unique(activity$date),steps.mean = meanSteps)
View(x)
class(x$steps.mean)
qplot(steps.mean,data=S1, geom="histogram")
View(`S1`)
S1[1,2]+S1[1,3]*60
strptime(S1[1,2])+S1[1,3]*60
as.POSIXct(sparse(S1[1,2],"00:00:00"),format = "%Y-%m-%d %I:%M:%S")
as.POSIXct(paste(S1[1,2],"00:00:00"),format = "%Y-%m-%d %I:%M:%S")
as.POSIXct(S1[1,2],format = "%Y-%m-%d %I:%M:%S")
as.POSIXct(S1[11,2],format = "%Y-%m-%d %I:%M:%S")
as.POSIXct(paste(as.character(S1[1,2]),"00:00:00"),format = "%Y-%m-%d %I:%M:%S")
as.POSIXct(S1[1,2],format = "%Y-%m-%d %I:%M:%S")+S1[1,3]*60
ans+1
as.POSIXct(S1[1,2],format = "%Y-%m-%d %I:%M:%S")+60
S1[1,3]
View(`S1`)
as.Character(S1[1,3])
as.character(S1[1,3])
S1[1,3]
as.character(S1[1,1])
as.character(S1[1,2])
paste(as.character(S1[1,2]),"00:00:00")
as.POSIXct(paste(as.character(S1[1,2]),"00:00:00"),format = "%Y-%m-%d %I:%M:%S")
as.Date(paste(as.character(S1[1,2]),"00:00:00"),format = "%Y-%m-%d %I:%M:%S")
t<-paste(as.character(S1[1,2]),"00:00:00")
as.Date(t)
as.POSIXct(t)
as.POSIXct(t, format = "%Y-%m-%d %I:%M:%S")
as.POSIXct(t, format = "%Y-%m-%d %H:%M:%S")
as.POSIXct(t, format = "%Y-%m-%d %H:%M:%S")+60
as.POSIXct(paste(as.character(S1[1,2]),"00:00:00"))
as.POSIXct(paste(as.character(S1[1,2]),"00:00:00"))+60
S1<-cbind(S1,as.POSIXct(paste(as.character(S1[:,2]),"00:00:00"))+S1[:,3]*60)
t<-as.POSIXct(paste(as.character(S1[1,2]),"00:00:00"))+60
t<-as.POSIXct(paste(as.character(S1[:,2]),"00:00:00"))+S1[:,3]*60
t<-S1[:,2]
t<-S1(:,2)
t<-S1[,2]
t<-S1[1:2,2]
t<-S1$date
S1
t<-S1[1:3,2]
t
t<-S1[:,2]
t<-S1[,2]
head(t)
t<-as.POSIXct(paste(as.character(S1[,2]),"00:00:00"))+S1[,3]*60
head(t)
S1<-cbind(S1,as.POSIXct(paste(as.character(S1[,2]),"00:00:00"))+S1[,3]*60)
View(`S1`)
S1<-cbind(S1,date.time=as.POSIXct(paste(as.character(S1[,2]),"00:00:00"))+S1[,3]*60)
View(`S1`)
S<-split(activity$steps,activity$date)
S<-split(activity,activity$date)
steps.mean<-sapply(split(activity$steps,activity$interval),mean,na.rm=TRUE)
totalStepsTable<-data.frame(interval=unique(activity$interval),steps.average = steps.mean)
View(totalStepsTable)
summary(totalStepTable)
summary(totalStepsTable)
steps.mean<-sapply(split(activity$steps,activity$interval),mean,na.rm=TRUE)
totalStepsTable<-data.frame(interval=unique(activity$interval),steps.average = round(steps.mean))
View(totalStepsTable)
library(ggplot2)
qplot(interval,steps.average,data=dailyActivityTable,geom="line")
x<-subset(activity,interval==0)
View(x)
missingRows<-subset(activity,is.na(activity$steps))
nrow(missingRows)
View(missingRows)
View(totalStepsTable)
totalStepsTable(totalStepsTable$inteval == 5)
totalStepsTable[totalStepsTable$inteval == 5]
totalStepsTable[totalStepsTable$inteval == 5,]
totalStepsTable[which(totalStepsTable$inteval == 5),]
totalStepsTable[totalStepsTable$interval == 5,]
totalStepsTable[interval == 5,]
activityFilled<-activity
fill<-function(row){
temp<-dailyActivityTable[dailyActivityTable$interval == row$interval,]
row$steps<-temp$steps
}
apply(activityFilled,1,fill)
steps.mean<-sapply(split(activity$steps,activity$interval),mean,na.rm=TRUE)
dailyActivityTable<-data.frame(interval=unique(activity$interval),steps.average = round(steps.mean))
rownames(dailyActivityTable)<-NULL
activityFilled<-activity
fill<-function(row){
temp<-dailyActivityTable[dailyActivityTable$interval == row$interval,]
row$steps<-temp$steps
}
apply(activityFilled,1,fill)
apply(activityFilled[is.na(activity$steps),],1,fill)
activityFilled<-activity
fill<-function(row){
print(row)
temp<-dailyActivityTable[dailyActivityTable$interval == row$interval,]
print(temp)
row$steps<-temp$steps
}
apply(activityFilled[is.na(activity$steps),],1,fill)
fill<-function(row){
print(row)
row$steps<-555
}
apply(activityFilled[is.na(activity$steps),],1,fill)
View(activityFilled)
for(row in activityFilled[is.na(activity$steps),]){
temp<-dailyActivityTable[dailyActivityTable$interval == row$interval,]
print(temp)
row$steps<-temp$steps
}
x<-activityFilled[is.na(activity$steps),]
for(row in activityFilled[is.na(activity$steps),]){
temp<-dailyActivityTable[dailyActivityTable$interval == row$interval,]
print(temp)
row$steps<-temp$steps
}
for(row in activityFilled[is.na(activity$steps),]){
temp<-dailyActivityTable[dailyActivityTable$interval == row[1,3],]
row$steps<-temp$steps
}
for(row in activityFilled[is.na(activity$steps),]){
temp<-dailyActivityTable[dailyActivityTable$interval == activityFilled[row,3],]
activityFilled[row,1]<-temp$steps
}
fill<-function(row){
if(is.na(row))
temp<-dailyActivityTable[dailyActivityTable$interval == row$interval,]
row$steps<-temp$steps
}
apply(activityFilled,1,fill)
fill<-function(row){
if(is.na(row))
temp<-dailyActivityTable[dailyActivityTable$interval == row[3],]
row[3]<-temp$steps
}
apply(activityFilled,1,fill)
x<-which(is.na(activity$steps))
View(dailyActivityTable)
for(idx in which(is.na(activity$steps))){
activityFilled[idx,1]<-dailyActivityTable[dailyActivityTable$interval == activityFilled[idx,3],2]
}
View(activityFilled)
missingRows<-subset(activityFilled,is.na(activityFilled$steps))
nrow(missingRows)
weekdaycheck<-activity(as.POSIXct(activity$date)$wday %in% c(2:6))
head(activity)
weekdaycheck<-activity[as.POSIXct(activity$date)$wday %in% c(2:6)]
weekdaycheck<-activity[as.POSIXlt(activity$date)$wday %in% c(2:6)]
View(activity)
weekdaycheck<-as.POSIXlt(activity$date)$wday %in% c(2:6)
weekday<-as.factor(weekdaycheck,levels=c(TRUE,FALSE), labels = c("weekday","weekend"))
weekday<-as.factor(weekdaycheck, labels = c("weekday","weekend"))
weekday<-factor(weekdaycheck,levels=c(TRUE,FALSE), labels = c("weekday","weekend"))
weekday<-cbind(activity,day.type=weekday)
View(weekday)
weekdaycheck<-weekdays(activity$date)
weekdaycheck<-weekdays(activity$date) %in% c("Saturday","Sunday")
weekdaycheck<-weekdays(activity$date) %in% c("Saturday","Sunday")
activityDayType<-cbind(activity,day.type=factor(weekdaycheck,levels=c(TRUE,FALSE), labels = c("weekend","weekday")))
activityDayType<-activityDayType[order(day.type),]
weekdaycheck<-weekdays(activity$date) %in% c("Saturday","Sunday")
activityDayType<-cbind(activity,day.type=factor(weekdaycheck,levels=c(TRUE,FALSE), labels = c("weekend","weekday")))
View(activityDayType)
activityDayType<-activityDayType[order(day.type),]
activityDayType<-activityDayType[order(activityDayType$day.type),]
steps.mean<-sapply(split(activityDayType,activityDayType$day.type),function(x){ sapply(split(x$steps,x$interval),mean,na.rm=TRUE)})
length(steps.mean)
head(steps.mean)
steps.mean<-data.frame(steps.mean)
View(steps.mean)
steps.mean$interval<-rownames(steps.mean)
View(steps.mean)
library(gridExtra)
weekdaycheck<-weekdays(activity$date) %in% c("Saturday","Sunday")
activityDayType<-cbind(activity,day.type=factor(weekdaycheck,levels=c(TRUE,FALSE), labels = c("weekend","weekday")))
activityDayType<-activityDayType[order(activityDayType$day.type),]
dayTypeMean<-sapply(split(activityDayType,activityDayType$day.type),function(x){ sapply(split(x$steps,x$interval),mean,na.rm=TRUE)})
dayTypeMean<-data.frame(dayTypeMean)
dayTypeMean<-cbind(interval=rownames(dayTypeMean),dayTypeMean)
rownames(dayTypeMean)<-NULL
summary(dayTypeMean)
View(dayTypeMean)
weekdaycheck<-weekdays(activity$date) %in% c("Saturday","Sunday")
activityDayType<-cbind(activity,day.type=factor(weekdaycheck,levels=c(TRUE,FALSE), labels = c("weekend","weekday")))
activityDayType<-activityDayType[order(activityDayType$day.type),]
dayTypeMean<-sapply(split(activityDayType,activityDayType$day.type),function(x){ sapply(split(x$steps,x$interval),mean,na.rm=TRUE)})
dayTypeMean<-data.frame(dayTypeMean)
dayTypeMean<-cbind(interval=rownames(dayTypeMean),dayTypeMean)
rownames(dayTypeMean)<-NULL
summary(dayTypeMean)
p1 <- ggplot(dayTypeMean, aes(x=interval, y=weekday),geom_line(),ggtitle("Weekday"))
p2 <- ggplot(dayTypeMean, aes(x=interval, y=weekend),geom_line(),ggtitle("Weekend"))
if(!require(gridExtra)){
if(!gridExtra %in% rownames(installed.packages()))
install.packages("gridExtra")
library(gridExtra)
}
grid.arrange(p1,p2)
install.packages("gridExtra")
library(gridExtra)
remove.packages(gridExtra)
remove.packages("gridExtra")
library(gridExtra)
grid.arrange(p1,p2)
if(!require(gridExtra)){
if(!gridExtra %in% rownames(installed.packages()))
install.packages("gridExtra")
library(gridExtra)
}
grid.arrange(p1,p2)
rownames(installed.packages()
rownames(installed.packages())
x<rownames(installed.packages())
x<-rownames(installed.packages())
y<-"gridExtra" %in% x
y<-gridExtra %in% x
weekdaycheck<-weekdays(activity$date) %in% c("Saturday","Sunday")
activityDayType<-cbind(activity,day.type=factor(weekdaycheck,levels=c(TRUE,FALSE), labels = c("weekend","weekday")))
activityDayType<-activityDayType[order(activityDayType$day.type),]
dayTypeMean<-sapply(split(activityDayType,activityDayType$day.type),function(x){ sapply(split(x$steps,x$interval),mean,na.rm=TRUE)})
dayTypeMean<-data.frame(dayTypeMean)
dayTypeMean<-cbind(interval=rownames(dayTypeMean),dayTypeMean)
rownames(dayTypeMean)<-NULL
summary(dayTypeMean)
p1 <- ggplot(dayTypeMean, aes(x=interval, y=weekday),geom_line(),ggtitle("Weekday"))
p2 <- ggplot(dayTypeMean, aes(x=interval, y=weekend),geom_line(),ggtitle("Weekend"))
if(!require(gridExtra)){
if(!"gridExtra" %in% rownames(installed.packages()))
install.packages("gridExtra")
library(gridExtra)
}
grid.arrange(p1,p2)
install.packages("gridExtra")
install.packages("gridExtra")
if(!require(gridExtra)){
if(!"gridExtra" %in% rownames(installed.packages()))
install.packages("gridExtra")
library(gridExtra)
}
dayTypeMean<-cbind(interval=rownames(dayTypeMean),round(dayTypeMean$weekday),round(daytypeMean$weekend))
activity <- read.csv(file="./activity/activity.csv", header = TRUE)
activity$date<-as.Date(activity$date, format = "%Y-%m-%d")
summary(activity)
weekdaycheck<-weekdays(activity$date) %in% c("Saturday","Sunday")
activityDayType<-cbind(activity,day.type=factor(weekdaycheck,levels=c(TRUE,FALSE), labels = c("weekend","weekday")))
activityDayType<-activityDayType[order(activityDayType$day.type),]
dayTypeMean<-sapply(split(activityDayType,activityDayType$day.type),function(x){ sapply(split(x$steps,x$interval),mean,na.rm=TRUE)})
dayTypeMean<-data.frame(dayTypeMean)
dayTypeMean<-cbind(interval=rownames(dayTypeMean),weekday=round(dayTypeMean$weekday),weekend=round(dayTypeMean$weekend))
weekdaycheck<-weekdays(activity$date) %in% c("Saturday","Sunday")
activityDayType<-cbind(activity,day.type=factor(weekdaycheck,levels=c(TRUE,FALSE), labels = c("weekend","weekday")))
activityDayType<-activityDayType[order(activityDayType$day.type),]
dayTypeMean<-sapply(split(activityDayType,activityDayType$day.type),function(x){ sapply(split(x$steps,x$interval),mean,na.rm=TRUE)})
dayTypeMean<-data.frame(dayTypeMean)
dayTypeMean<-cbind(interval=rownames(dayTypeMean),dayTypeMean)
dayTypeMean$weekday<-round(dayTypeMean$weekday)
dayTypeMean$weekend<-round(dayTypeMean$weekend)
rownames(dayTypeMean)<-NULL
summary(dayTypeMean)
p1 <- ggplot(dayTypeMean, aes(x=interval, y=weekday))
p1<-p1+geom_line()
p1<-p1+ggtitle("Weekday")
p2 <- ggplot(dayTypeMean, aes(x=interval, y=weekend))
p2<-p2+geom_line()
p2<-p2+ggtitle("Weekend")
if(!require(gridExtra)){
if(!"gridExtra" %in% rownames(installed.packages()))
install.packages("gridExtra")
library(gridExtra)
}
grid.arrange(p1,p2)
library(ggplot2)
weekdaycheck<-weekdays(activity$date) %in% c("Saturday","Sunday")
activityDayType<-cbind(activity,day.type=factor(weekdaycheck,levels=c(TRUE,FALSE), labels = c("weekend","weekday")))
activityDayType<-activityDayType[order(activityDayType$day.type),]
dayTypeMean<-sapply(split(activityDayType,activityDayType$day.type),function(x){ sapply(split(x$steps,x$interval),mean,na.rm=TRUE)})
dayTypeMean<-data.frame(dayTypeMean)
dayTypeMean<-cbind(interval=rownames(dayTypeMean),dayTypeMean)
dayTypeMean$weekday<-round(dayTypeMean$weekday)
dayTypeMean$weekend<-round(dayTypeMean$weekend)
rownames(dayTypeMean)<-NULL
summary(dayTypeMean)
p1 <- ggplot(dayTypeMean, aes(x=interval, y=weekday))
p1<-p1+geom_line()
p1<-p1+ggtitle("Weekday")
p2 <- ggplot(dayTypeMean, aes(x=interval, y=weekend))
p2<-p2+geom_line()
p2<-p2+ggtitle("Weekend")
if(!require(gridExtra)){
if(!"gridExtra" %in% rownames(installed.packages()))
install.packages("gridExtra")
library(gridExtra)
}
grid.arrange(p1,p2)
View(dayTypeMean)
View(dayTypeMean)
p1 <- ggplot(dayTypeMean, aes(x=interval, y=weekday))
p1<-p1+ggtitle("Weekday")
p2 <- ggplot(dayTypeMean, aes(x=interval, y=weekend))
p2<-p2+ggtitle("Weekend")
if(!require(gridExtra)){
if(!"gridExtra" %in% rownames(installed.packages()))
install.packages("gridExtra")
library(gridExtra)
}
grid.arrange(p1,p2)
qplot(interval,weekday,data=dayTypeMean,geom="line")
View(dayTypeMean)
class(dayTypeMean$interval)
dayTypeMean$interval<-as.integer(dayTypeMean$interval)
qplot(interval,weekday,data=dayTypeMean,geom="line")
require("ggplot2")
remove.packages("gridExtra")
